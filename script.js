// DOM Elements
const scheduleForm = document.getElementById('scheduleForm');
const userInput = document.getElementById('userInput');
const scheduleBody = document.getElementById('scheduleBody');
const loadingSpinner = document.getElementById('loadingSpinner');
const clearInputBtn = document.getElementById('clearInputBtn');
const deleteAllBtn = document.getElementById('deleteAllBtn');
const confirmModal = document.getElementById('confirmModal');
const cancelDelete = document.getElementById('cancelDelete');
const confirmDelete = document.getElementById('confirmDelete');
const copyScheduleBtn = document.getElementById('copyScheduleBtn');

// State management for schedule data
let scheduleData = [];

// Show or hide the loading spinner
function showLoading(show) {
    loadingSpinner.classList.toggle('hidden', !show);
}
// Render the schedule table
function renderSchedule() {
    // Sort the scheduleData by date and time
    scheduleData.sort((a, b) => {
        const dateA = new Date(`${a.date} ${a.time}`);
        const dateB = new Date(`${b.date} ${b.time}`);
        return dateA - dateB; // Sort in ascending order
    });

    scheduleBody.innerHTML = '';
    scheduleData.forEach((entry, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${entry.subject}</td>
            <td>${entry.eventType}</td>
            <td>${entry.date}</td>
            <td>${entry.time}</td>
            <td>${entry.description}</td>
            <td>
                <button class="btn btn-secondary edit-btn" data-index="${index}">Edit</button>
                <button class="btn btn-danger delete-btn" data-index="${index}">Delete</button>
            </td>
        `;
        scheduleBody.appendChild(row);
    });

    // Attach event listeners to edit and delete buttons
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', handleEdit);
    });
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', handleDelete);
    });
}


// Load schedule data from localStorage
function loadScheduleData() {
    const savedData = localStorage.getItem('scheduleData');
    if (savedData) scheduleData = JSON.parse(savedData);
}

// Save schedule data to localStorage
function saveScheduleData() {
    localStorage.setItem('scheduleData', JSON.stringify(scheduleData));
}

// Fetch structured schedule data from the server
async function processInput(inputText) {
    showLoading(true);
    try {
        // Refined prompt for the AI model
        const prompt = `You are an AI assistant that parses schedule requests. 
        Given the following input, extract the relevant details:

        Input: "${inputText}"

        You should output the result as follows:
        Subject: <subject>
        Event Type: <event type>
        Date: <DD/MM/YYYY>
        Time: <12-hour format (e.g., 3:00 PM)>
        Description: <description based on subject and event type>

        Example Input: "add cpi class test on 2/12/24 on 3pm"
        Example Output:
        Subject: CPI
        Event Type: Class Test 
        Date: 02/12/2024
        Time: 03:00 PM
        Description: CPI Class Test

        Please provide the output as shown in the example.`;

        const response = await fetch(`/api/process?input=${encodeURIComponent(prompt)}`);
        const data = await response.json();

        if (data.response) {
            // Parse response to extract event details
            const parsedData = parseAIResponse(data.response);

            const newEntry = {
                subject: parsedData.subject || 'Scheduled Event',
                eventType: parsedData.eventType || 'Event',
                date: parsedData.date || formatDate(new Date()), // Format date to DD/MM/YYYY
                time: parsedData.time || 'Not specified',
                description: parsedData.description || 'Generated by AI'
            };

            scheduleData.push(newEntry);
            saveScheduleData();
            renderSchedule();
        } else {
            alert('Failed to parse the schedule input.');
        }
    } catch (error) {
        console.error("Error processing input:", error);
        alert("An error occurred while processing your request. Please try again.");
    } finally {
        showLoading(false);
    }
}

// Helper function to parse AI response
// Helper function to parse AI response
function parseAIResponse(responseText) {
    const subjectMatch = responseText.match(/Subject:\s*(.*)/i);
    const eventTypeMatch = responseText.match(/Event Type:\s*(.*)/i);
    const dateMatch = responseText.match(/Date:\s*(\d{2}\/\d{2}\/\d{4})/i);
    const timeMatch = responseText.match(/Time:\s*(.*)/i);
    const descriptionMatch = responseText.match(/Description:\s*(.*)/i);

    return {
        subject: subjectMatch ? subjectMatch[1].trim() : 'Unknown Subject',
        eventType: eventTypeMatch ? eventTypeMatch[1].trim() : 'General Event', // Default if not found
        date: dateMatch ? dateMatch[1].trim() : formatDate(new Date()), // Default to today if no date
        time: timeMatch ? timeMatch[1].trim() : 'Not specified',
        description: descriptionMatch ? descriptionMatch[1].trim() : 'Generated by AI'
    };
}


// Helper function to format date to DD/MM/YYYY
function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// Handle form submission
scheduleForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const input = userInput.value.trim();
    if (input) await processInput(input);
    userInput.value = '';
});

// Clear input field
clearInputBtn.addEventListener('click', () => {
    userInput.value = '';
});

// Confirm delete all schedules
deleteAllBtn.addEventListener('click', () => {
    confirmModal.classList.add('active');
});

// Cancel delete confirmation
cancelDelete.addEventListener('click', () => {
    confirmModal.classList.remove('active');
});

// Confirm delete all action
confirmDelete.addEventListener('click', () => {
    scheduleData = [];
    saveScheduleData();
    renderSchedule();
    confirmModal.classList.remove('active');
});

// Copy schedule to clipboard
copyScheduleBtn.addEventListener('click', async () => {
    const textSchedule = scheduleData.map(entry => 
        `Subject: ${entry.subject}\nEvent Type: ${entry.eventType}\nDate: ${entry.date}\nTime: ${entry.time}\nDescription: ${entry.description}\n`
    ).join('\n----------------------------------------\n');
    await navigator.clipboard.writeText(textSchedule);
    alert('Schedule copied to clipboard!');
});

// Handle edit of individual schedule items
function handleEdit(event) {
    const index = parseInt(event.target.dataset.index, 10);
    const entry = scheduleData[index];

    // Prompt user to edit each field
    const newSubject = prompt("Edit Subject:", entry.subject);
    const newEventType = prompt("Edit Event Type:", entry.eventType);
    const newDate = prompt("Edit Date (DD/MM/YYYY):", entry.date);
    const newTime = prompt("Edit Time:", entry.time);
    const newDescription = prompt("Edit Description:", entry.description);

    // Update the entry with new values or keep existing if no input
    scheduleData[index] = {
        ...entry,
        subject: newSubject || entry.subject,
        eventType: newEventType || entry.eventType,
        date: newDate || entry.date,
        time: newTime || entry.time,
        description: newDescription || entry.description
    };
    saveScheduleData();
    renderSchedule();
}

// Handle delete of individual schedule items
function handleDelete(event) {
    const index = parseInt(event.target.dataset.index, 10);
    scheduleData.splice(index, 1);
    saveScheduleData();
    renderSchedule();
}

// Load schedule data and render table on page load
document.addEventListener('DOMContentLoaded', () => {
    loadScheduleData();
    renderSchedule();
});
